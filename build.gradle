plugins {
	id 'java'
	id 'scala'
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'net.minecrell.licenser' version '0.4.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
	mavenCentral()
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven { url "https://dl.bintray.com/shedaniel/shedaniel-mods" }
	maven { url 'https://jitpack.io' }
	maven { url 'https://aperlambda.github.io/maven'}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "io.github.cottonmc:LibGui:${project.libgui_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	modImplementation "com.github.LambdAurora:LambDynamicLights:${project.ldl_version}"

	modApi("net.fabricmc:fabric-language-scala:0.3.2.+") {
		exclude group: 'net.fabricmc'
	}
}

sourceSets {
	main {
		java {
			srcDirs = []
		}
		scala {
			srcDirs = ['src/main/scala', 'src/main/java']
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}"}
	}
}

license {
	header rootProject.file('LICENSE')
	include '**/*.scala'
	include '**/*.java'
}

tasks.build.dependsOn("licenseFormat")

curseforge {
	if (project.hasProperty('curse_api_key')) {
		apiKey = project.getProperty('curse_api_key')
	}
	project {
		id = '423880'
		def changelogFile = rootProject.file('changelog.txt')
		if (changelogFile.exists()) {
			changelog = changelogFile.getText('UTF-8')
		} else {
			changelog = 'A changelog can be found at https://github.com/BoogieMonster1O1/cartses/commits'
		}
		releaseType = 'alpha'
		addGameVersion '1.16.2'
		addGameVersion '1.16.4'
		addGameVersion 'Fabric'
		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[${project.minecraft_version}] Cartses ${version}"
		}
		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
	options {
		forgeGradleIntegration = false
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
